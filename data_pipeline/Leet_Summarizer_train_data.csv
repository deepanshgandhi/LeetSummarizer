Question,Code,Plain Text
"Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.

You may assume that each input would have exactly one solution, and you may not use the same element twice.

You can return the answer in any order.

 

Example 1:

Input: nums = [2,7,11,15], target = 9
Output: [0,1]
Explanation: Because nums[0] + nums[1] == 9, we return [0, 1].","class Solution:
    def twoSum(self, nums: List[int], target: int) -> List[int]:
        prevMap = {}  # val -> index

        for i, n in enumerate(nums):
            diff = target - n
            if diff in prevMap:
                return [prevMap[diff], i]
            prevMap[n] = i","Use hashing. Go through the list of numbers, remember each number's position in a dictionary. For each number, check if the difference between the target and the current number exists in the dictionary. If it does, we've found the pair that adds up to the target, return their indices."
"Given two strings s and t, return true if t is an anagram of s, and false otherwise.

An Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.

 

Example 1:

Input: s = ""anagram"", t = ""nagaram""
Output: true","class Solution:
    def isAnagram(self, s: str, t: str) -> bool:
        if len(s) != len(t):
            return False

        countS, countT = {}, {}

        for i in range(len(s)):
            countS[s[i]] = 1 + countS.get(s[i], 0)
            countT[t[i]] = 1 + countT.get(t[i], 0)
        return countS == countT","
Use hashing. Go through both strings, remembering the count of each character in separate dictionaries for each string. For every character encountered in both strings, increment its count in the respective dictionaries. Once the traversal is complete, compare the dictionaries. If they are equal, it means both strings have the same characters with the same counts, indicating that one is an anagram of the other. Return true if the dictionaries are equal, otherwise return false."
"A phrase is a palindrome if, after converting all uppercase letters into lowercase letters and removing all non-alphanumeric characters, it reads the same forward and backward. Alphanumeric characters include letters and numbers.

Given a string s, return true if it is a palindrome, or false otherwise.

 

Example 1:

Input: s = ""A man, a plan, a canal: Panama""
Output: true
Explanation: ""amanaplanacanalpanama"" is a palindrome.","class Solution:
    def isPalindrome(self, s: str) -> bool:
        new = ''
        for a in s:
            if a.isalpha() or a.isdigit():
                new += a.lower()
        return (new == new[::-1])
","Iterate through the string, converting uppercase letters to lowercase and removing non-alphanumeric characters. For each alphanumeric character encountered, append it to a new string. After completing the traversal, compare the new string with its reverse. If they match, the original string is a palindrome, so return true; otherwise, return false."
"You are given an array prices where prices[i] is the price of a given stock on the ith day.

You want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock.

Return the maximum profit you can achieve from this transaction. If you cannot achieve any profit, return 0.

 

Example 1:

Input: prices = [7,1,5,3,6,4]
Output: 5
Explanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.
Note that buying on day 2 and selling on day 1 is not allowed because you must buy before you sell.","class Solution:
    def maxProfit(self, prices: List[int]) -> int:
        res = 0
        
        lowest = prices[0]
        for price in prices:
            if price < lowest:
                lowest = price
            res = max(res, price - lowest)
        return res
","Iterate through the array of stock prices, keep track of the lowest price seen so far. Calculate the potential profit for each subsequent day by subtracting the lowest price from the current price. Update the maximum profit seen so far if the potential profit is greater. Return the maximum profit achieved."
"Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.

An input string is valid if:

Open brackets must be closed by the same type of brackets.
Open brackets must be closed in the correct order.
Every close bracket has a corresponding open bracket of the same type.
 

Example 1:

Input: s = ""()""
Output: true
Example 2:

Input: s = ""()[]{}""
Output: true","class Solution:
    def isValid(self, s: str) -> bool:
        Map = {"")"": ""("", ""]"": ""["", ""}"": ""{""}
        stack = []

        for c in s:
            if c not in Map:
                stack.append(c)
                continue
            if not stack or stack[-1] != Map[c]:
                return False
            stack.pop()

        return not stack
","Use a stack to keep track of opening brackets. As we go through the string, push opening brackets onto the stack and pop them off when we encounter their corresponding closing brackets. If the stack is empty at the end, the string is valid; otherwise, it's not."
"Given an array of strings strs, group all anagrams together into sublists. You may return the output in any order.
An anagram is a string that contains the exact same characters as another string, but the order of the characters can be different.

Example : 1
Input: strs = [""act"",""pots"",""tops"",""cat"",""stop"",""hat""]
Output: [[""hat""],[""act"", ""cat""],[""stop"", ""pots"", ""tops""]]
","class Solution:
    def groupAnagrams(self, strs: List[str]) -> List[List[str]]:
        ans = defaultdict(list)

        for s in strs:
            count = [0] * 26
            for c in s:
                count[ord(c) - ord(""a"")] += 1
            ans[tuple(count)].append(s)
        return ans.values()
","To group anagrams from a list of strings, create a defaultdict of lists. For each string, generate a character count tuple representing the frequency of each letter. Use this tuple as the key to group anagrams together. The result is a list of grouped anagrams."
"Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] where nums[i] + nums[j] + nums[k] == 0, and the indices i, j and k are all distinct.
The output should not contain any duplicate triplets. You may return the output and the triplets in any order.
Example 1:
Input: nums = [-1,0,1,2,-1,-4]

Output: [[-1,-1,2],[-1,0,1]]","class Solution:
    def threeSum(self, nums: List[int]) -> List[List[int]]:
        res = []
        nums.sort()

        for i, a in enumerate(nums):
            if a > 0:
                break

            if i > 0 and a == nums[i - 1]:
                continue

            l, r = i + 1, len(nums) - 1
            while l < r:
                threeSum = a + nums[l] + nums[r]
                if threeSum > 0:
                    r -= 1
                elif threeSum < 0:
                    l += 1
                else:
                    res.append([a, nums[l], nums[r]])
                    l += 1
                    r -= 1
                    while nums[l] == nums[l - 1] and l < r:
                        l += 1
                        
        return res
","To find all unique triplets in an array that sum to zero, sort the array first. Iterate through the array, using two pointers (left and right) to find pairs that sum to the negative of the current element. Skip duplicate elements to avoid repeating triplets. The result is a list of these unique triplets."
"
You are given a string s consisting of only uppercase english characters and an integer k. You can choose up to k characters of the string and replace them with any other uppercase English character.
After performing at most k replacements, return the length of the longest substring which contains only one distinct character.
Example 1:
Input: s = ""XYYX"", k = 2
Output: 4
","class Solution:
    def characterReplacement(self, s: str, k: int) -> int:
        count = {}
        
        l = 0
        maxf = 0
        for r in range(len(s)):
            count[s[r]] = 1 + count.get(s[r], 0)
            maxf = max(maxf, count[s[r]])

            if (r - l + 1) - maxf > k:
                count[s[l]] -= 1
                l += 1

        return (r - l + 1)
","To find the length of the longest substring with at most `k` replacements, use a sliding window approach. Maintain a count of characters in the current window and track the maximum frequency of any character. If the window size minus the max frequency exceeds `k`, shrink the window from the left. The result is the maximum length of such a substring."
"You are given an integer array piles where piles[i] is the number of bananas in the ith pile. You are also given an integer h, which represents the number of hours you have to eat all the bananas.

You may decide your bananas-per-hour eating rate of k. Each hour, you may choose a pile of bananas and eats k bananas from that pile. If the pile has less than k bananas, you may finish eating the pile but you can not eat from another pile in the same hour.

Return the minimum integer k such that you can eat all the bananas within h hours.

Example 1:

Input: piles = [1,4,3,2], h = 9

Output: 2","class Solution:
    def minEatingSpeed(self, piles: List[int], h: int) -> int:
        l, r = 1, max(piles)
        res = r

        while l <= r:
            k = (l + r) // 2

            totalTime = 0
            for p in piles:
                totalTime += math.ceil(float(p) / k)
            if totalTime <= h:
                res = k
                r = k - 1
            else:
                l = k + 1
        return res
","To find the minimum eating rate `k` to finish all banana piles within `h` hours, use binary search between 1 and the maximum pile size. For each mid-point `k`, calculate the total hours needed to eat all bananas. If the total hours are within `h`, adjust the search range to find a smaller `k`; otherwise, increase `k`. The result is the minimum `k` that allows eating all bananas within `h` hours."
"You are given the head of a singly linked-list.

The positions of a linked list of length = 7 for example, can intially be represented as:

[0, 1, 2, 3, 4, 5, 6]

Reorder the nodes of the linked list to be in the following order:

[0, 6, 1, 5, 2, 4, 3]

Notice that in the general case for a list of length = n the nodes are reordered to be in the following order:

[0, n-1, 1, n-2, 2, n-3, ...]

You may not modify the values in the list's nodes, but instead you must reorder the nodes themselves.

Example 1:

Input: head = [2,4,6,8]

Output: [2,8,4,6]","class Solution:
    def reorderList(self, head: Optional[ListNode]) -> None:
        slow, fast = head, head.next
        while fast and fast.next:
            slow = slow.next
            fast = fast.next.next

        second = slow.next
        prev = slow.next = None
        while second:
            tmp = second.next
            second.next = prev
            prev = second
            second = tmp

        first, second = head, prev
        while second:
            tmp1, tmp2 = first.next, second.next
            first.next = second
            second.next = tmp1
            first, second = tmp1, tmp2
","To reorder a singly linked list in the specified pattern, first use the slow and fast pointer technique to find the middle of the list. Reverse the second half of the list. Then, merge the two halves by alternating nodes from each half. This rearranges the nodes in the required order without modifying their values."
"Given an array of integers numbers that is sorted in non-decreasing order.

Return the indices (1-indexed) of two numbers, [index1, index2], such that they add up to a given target number target and index1 < index2. Note that index1 and index2 cannot be equal, therefore you may not use the same element twice.

There will always be exactly one valid solution.

Your solution must use 
𝑂(1)
O(1) additional space.

Example 1:

Input: numbers = [1,2,3,4], target = 3

Output: [1,2]
Explanation:
The sum of 1 and 2 is 3. Since we are assuming a 1-indexed array, index1 = 1, index2 = 2. We return [1, 2].","class Solution:
    def twoSum(self, numbers: List[int], target: int) -> List[int]:
        l, r = 0, len(numbers) - 1

        while l < r:
            curSum = numbers[l] + numbers[r]

            if curSum > target:
                r -= 1
            elif curSum < target:
                l += 1
            else:
                return [l + 1, r + 1]
","Use the two-pointer technique on a sorted list. Start with pointers at both ends of the list and adjust them based on the sum of the numbers at these pointers: move the right pointer left if the sum is too large, or the left pointer right if the sum is too small. Return the 1-based indices when the sum equals the target."
"Given an array of integers nums and an integer target, return the indices i and j such that nums[i] + nums[j] == target and i != j. 

You may assume that every input has exactly one pair of indices i and j that satisfy the condition.

Return the answer with the smaller index first.

Example 1:

Input: 
nums = [3,4,5,6], target = 7

Output: [0,1]. Explanation: nums[0] + nums[1] == 7, so we return [0, 1].

","class Solution:
    def twoSum(self, nums: List[int], target: int) -> List[int]:
        prevMap = {}  # val -> index

        for i, n in enumerate(nums):
            diff = target - n
            if diff in prevMap:
                return [prevMap[diff], i]
            prevMap[n] = i
","Use hashing. Iterate through the list while storing each number's index in a dictionary. For each number, calculate the difference needed to reach the target and check if this difference is already in the dictionary. If it is, return the indices of the current number and the number that makes up the difference."
"Given a string s, find the length of the longest substring without duplicate characters.

A substring is a contiguous sequence of characters within a string.

Example 1:

Input: s = ""zxyzxyz""

Output: 3
Explanation: The string ""xyz"" is the longest without duplicate characters.","class Solution:
    def lengthOfLongestSubstring(self, s: str) -> int:
        charSet = set()
        l = 0
        res = 0

        for r in range(len(s)):
            while s[r] in charSet:
                charSet.remove(s[l])
                l += 1
            charSet.add(s[r])
            res = max(res, r - l + 1)
        return res
","Use a sliding window with a set to find the length of the longest substring without repeating characters. Expand the window by moving the right pointer and add characters to the set. If a character repeats, move the left pointer to the right until the repeating character is removed from the set. Track and update the maximum length of the substring found."
"You are given an array of distinct integers nums, sorted in ascending order, and an integer target.

Implement a function to search for target within nums. If it exists, then return its index, otherwise, return -1.

Your solution must run in 
𝑂(𝑙𝑜𝑔𝑛) time.

Example 1:

Input: nums = [-1,0,2,4,6,8], target = 4

Output: 3","class Solution:
    def search(self, nums: List[int], target: int) -> int:
        l, r = 0, len(nums) - 1

        while l <= r:
            m = l + ((r - l) // 2)  # (l + r) // 2 can lead to overflow
            if nums[m] > target:
                r = m - 1
            elif nums[m] < target:
                l = m + 1
            else:
                return m
        return -1
",Use binary search to find the target in a sorted list. Initialize pointers at the start and end of the list. Calculate the middle index and compare the middle element with the target. Adjust the pointers based on whether the middle element is greater or lesser than the target. Repeat until the target is found or the search space is exhausted. Return the index of the target or -1 if it is not found.
"Given the beginning of a singly linked list head, reverse the list, and return the new beginning of the list.

Example 1:

Input: head = [0,1,2,3]

Output: [3,2,1,0]","class Solution:
    def reverseList(self, head: ListNode) -> ListNode:
        prev, curr = None, head

        while curr:
            temp = curr.next
            curr.next = prev
            prev = curr
            curr = temp
        return prev","Reverse a singly linked list by iterating through it. Maintain pointers for the previous and current nodes, updating each node's next pointer to point to the previous node as you traverse the list. Return the new head of the reversed list after the traversal is complete.





"
"You are given the beginning of a linked list head, and an integer n.

Remove the nth node from the end of the list and return the beginning of the list.

Example 1:

Input: head = [1,2,3,4], n = 2

Output: [1,2,4]
Example 2:

Input: head = [5], n = 1

Output: []
Example 3:

Input: head = [1,2], n = 2

Output: [2]
Constraints:

The number of nodes in the list is sz.
1 <= sz <= 30
0 <= Node.val <= 100
1 <= n <= sz","class Solution:
    def removeNthFromEnd(self, head: Optional[ListNode], n: int) -> Optional[ListNode]:
        dummy = ListNode(0, head)
        left = dummy
        right = head

        while n > 0:
            right = right.next
            n -= 1

        while right:
            left = left.next
            right = right.next

        left.next = left.next.next
        return dummy.next","To remove the nth node from the end of a linked list, first create a dummy node to handle edge cases. Move the right pointer n steps ahead. Then, move both left and right pointers together until the right pointer reaches the end of the list. Finally, adjust the next pointer of the left node to remove the target node, and return the list starting from the dummy's next node."
"You are given an array of length n which was originally sorted in ascending order. It has now been rotated between 1 and n times. For example, the array nums = [1,2,3,4,5,6] might become:

[3,4,5,6,1,2] if it was rotated 4 times.
[1,2,3,4,5,6] if it was rotated 6 times.
Given the rotated sorted array nums and an integer target, return the index of target within nums, or -1 if it is not present.

You may assume all elements in the sorted rotated array nums are unique,

A solution that runs in O(n) time is trivial, can you write an algorithm that runs in O(log n) time?

Example 1:

Input: nums = [3,4,5,6,1,2], target = 1

Output: 4

Example 2:

Input: nums = [3,5,6,0,1,2], target = 4

Output: -1

Constraints:

1 <= nums.length <= 1000
-1000 <= nums[i] <= 1000
-1000 <= target <= 1000","class Solution:
    def search(self, nums: List[int], target: int) -> int:
        l, r = 0, len(nums) - 1

        while l <= r:
            mid = (l + r) // 2
            if target == nums[mid]:
                return mid

            if nums[l] <= nums[mid]:
                if target > nums[mid] or target < nums[l]:
                    l = mid + 1
                else:
                    r = mid - 1
                    
            else:
                if target < nums[mid] or target > nums[r]:
                    r = mid - 1
                else:
                    l = mid + 1
        return -1
","To search for a target in a rotated sorted array, use a binary search approach. Initialize two pointers, l and r, at the start and end of the array. Calculate the midpoint and compare it with the target. Adjust the pointers based on the sorted portion of the array and the target's position relative to mid. Continue until the target is found or the pointers converge, and return the index or -1 if the target is not found"
"You are given two strings s1 and s2.

Return true if s2 contains a permutation of s1, or false otherwise. That means if a permutation of s1 exists as a substring of s2, then return true.

Both strings only contain lowercase letters.

Example 1:

Input: s1 = ""abc"", s2 = ""lecabee""

Output: true
Explanation: The substring ""cab"" is a permutation of ""abc"" and is present in ""lecabee"".

Example 2:

Input: s1 = ""abc"", s2 = ""lecaabee""

Output: false
Constraints:

1 <= s1.length, s2.length <= 1000","class Solution:
    def checkInclusion(self, s1: str, s2: str) -> bool:
        if len(s1) > len(s2):
            return False

        s1Count, s2Count = [0] * 26, [0] * 26
        for i in range(len(s1)):
            s1Count[ord(s1[i]) - ord(""a"")] += 1
            s2Count[ord(s2[i]) - ord(""a"")] += 1

        matches = 0
        for i in range(26):
            matches += 1 if s1Count[i] == s2Count[i] else 0

        l = 0
        for r in range(len(s1), len(s2)):
            if matches == 26:
                return True

            index = ord(s2[r]) - ord(""a"")
            s2Count[index] += 1
            if s1Count[index] == s2Count[index]:
                matches += 1
            elif s1Count[index] + 1 == s2Count[index]:
                matches -= 1

            index = ord(s2[l]) - ord(""a"")
            s2Count[index] -= 1
            if s1Count[index] == s2Count[index]:
                matches += 1
            elif s1Count[index] - 1 == s2Count[index]:
                matches -= 1
            l += 1
        return matches == 26
","To check if s1's permutation is a substring of s2, first compare their lengths and return False if s1 is longer. Count character frequencies for s1 and the initial window of s2. Track matches of character frequencies. Slide the window across s2, updating counts and matches. If matches reach 26, return True. Adjust the left and right ends of the window, updating matches accordingly. Finally, return True if a permutation match is found, otherwise return False."
"Given an integer array nums, move all 0's to the end of it while maintaining the relative order of the non-zero elements.

Note that you must do this in-place without making a copy of the array.

 

Example 1:

Input: nums = [0,1,0,3,12]
Output: [1,3,12,0,0]
Example 2:

Input: nums = [0]
Output: [0]
 

Constraints:

1 <= nums.length <= 10^4
-2^31 <= nums[i] <= 2^31 - 1","class Solution:
    def moveZeroes(self, nums: list) -> None:
        slow = 0
        for fast in range(len(nums)):
            if nums[fast] != 0 and nums[slow] == 0:
                nums[slow], nums[fast] = nums[fast], nums[slow]

            if nums[slow] != 0:
                slow += 1","
To move all zeros in the list to the end while maintaining the order of non-zero elements, use a two-pointer technique. Initialize slow at the start. Iterate through the list with fast. When a non-zero element at fast is found and the element at slow is zero, swap them. Increment slow when it points to a non-zero element. This shifts all zeros to the end in a single pass."
"There is a function signFunc(x) that returns:

1 if x is positive.
-1 if x is negative.
0 if x is equal to 0.
You are given an integer array nums. Let product be the product of all values in the array nums.

Return signFunc(product).

 

Example 1:

Input: nums = [-1,-2,-3,-4,3,2,1]
Output: 1
Explanation: The product of all values in the array is 144, and signFunc(144) = 1
Example 2:

Input: nums = [1,5,0,2,-3]
Output: 0
Explanation: The product of all values in the array is 0, and signFunc(0) = 0
Example 3:

Input: nums = [-1,1,-1,1,-1]
Output: -1
Explanation: The product of all values in the array is -1, and signFunc(-1) = -1
 

Constraints:

1 <= nums.length <= 1000
-100 <= nums[i] <= 100
","class Solution:
    def arraySign(self, nums: List[int]) -> int:
        product_sign = 1

        for num in nums:
            if num == 0:
                return 0
            if num < 0:
                product_sign *= -1

        if product_sign > 0:
            return 1
        else:
            return -1","To determine the sign of the product of an array's elements without calculating the actual product, initialize a variable product_sign to 1. Iterate through the array, and for each element, return 0 if it's zero. If an element is negative, flip the sign of product_sign. Finally, return 1 if product_sign is positive and -1 if it is negative. This approach ensures that only the sign of the product is considered, not its magnitude."
"Given a list of non-negative integers nums, arrange them such that they form the largest number and return it.

Since the result may be very large, so you need to return a string instead of an integer.

 

Example 1:

Input: nums = [10,2]
Output: ""210""","class Solution:
    def largestNumber(self, nums: List[int]) -> str:
        # Convert integers to strings
        nums = [str(num) for num in nums]

        # Custom sort based on concatenated string representations
        nums.sort(key=lambda x: x*10, reverse=True)

        # Handle case where all numbers are 0
        if nums[0] == '0':
            return '0'

        # Concatenate sorted strings and return
        return ''.join(nums)","Leveraging string concatenation for sorting and comparison. Go through  the given list of non-negative integers, converting each integer to its string representation. Sort the list of strings based on their  concatenated representations to determine their relative order. Ensure proper handling for the case where all numbers in the list are zeroes. Concatenate the sorted strings and return the result as a string."
"You are given two integer arrays nums1 and nums2, sorted in non-decreasing order, and two integers m and n, representing the number of elements in nums1 and nums2 respectively.

Merge nums1 and nums2 into a single array sorted in non-decreasing order.

The final sorted array should not be returned by the function, but instead be stored inside the array nums1. To accommodate this, nums1 has a length of m + n, where the first m elements denote the elements that should be merged, and the last n elements are set to 0 and should be ignored. nums2 has a length of n.

 
Example 1:

Input: nums1 = [1,2,3,0,0,0], m = 3, nums2 = [2,5,6], n = 3
Output: [1,2,2,3,5,6]
Explanation: The arrays we are merging are [1,2,3] and [2,5,6].
The result of the merge is [1,2,2,3,5,6] with the underlined elements coming from nums1.","class Solution:    def merge(self, nums1: List[int], m: int, nums2: List[int], n: int) -> None:        a, b, write_index = m-1, n-1, m + n - 1
        while b >= 0:            if a >= 0 and nums1[a] > nums2[b]:                nums1[write_index] = nums1[a]                a -= 1            else:                nums1[write_index] = nums2[b]                b -= 1
            write_index -= 1","Using two-pointer approach for merging sorted arrays. Initialize pointers a, b, and write_index. Iterate backwards through nums1 and nums2 simultaneously, comparing elements pointed to by a and b, and filling in nums1 from the end. Ensure proper handling for elements in nums2 that are not yet merged."
"The frequency of an element is the number of times it occurs in an array.

You are given an integer array nums and an integer k. In one operation, you can choose an index of nums and increment the element at that index by 1.

Return the maximum possible frequency of an element after performing at most k operations.

Example 2:

Input: nums = [1,4,8,13], k = 5
Output: 2
Explanation: There are multiple optimal solutions:
- Increment the first element three times to make nums = [4,4,8,13]. 4 has a frequency of 2.
- Increment the second element four times to make nums = [1,8,8,13]. 8 has a frequency of 2.
- Increment the third element five times to make nums = [1,4,13,13]. 13 has a frequency of 2.","class Solution:
    def maxFrequency(self, nums: List[int], k: int) -> int:
        nums.sort()
        left = 0
        ans = 0
        curr = 0
        
        for right in range(len(nums)):
            target = nums[right]
            curr += target
            
            while (right - left + 1) * target - curr > k:
                curr -= nums[left]
                left += 1
            
            ans = max(ans, right - left + 1)

        return ans","Using sliding window approach to find the maximum frequency of an element after performing at most k operations. Sort the array nums. Initialize pointers left, right, and variables ans and curr. Iterate through nums using a sliding window defined by left and right. Increment curr by the value at right in each iteration. While the cost of converting the window into a uniform array exceeds k, decrement curr by the value at left and increment left. Update ans with the maximum length of the valid window encountered. Return ans as the maximum possible frequency of an element."
"You are given an array of integers temperatures where temperatures[i] represents the daily temperatures on the ith day.
Return an array result where result[i] is the number of days after the ith
 day before a warmer temperature appears on a future day. If there is no
 day in the future where a warmer temperature will appear for the ith day, set result[i] to 0 instead.
Example 1:
Input: temperatures = [30,38,30,36,35,40,28]

Output: [1,4,1,2,1,0,0]","class Solution:
    def dailyTemperatures(self, temperatures: List[int]) -> List[int]:
        res = [0] * len(temperatures)
        stack = []  # pair: [temp, index]

        for i, t in enumerate(temperatures):
            while stack and t > stack[-1][0]:
                stackT, stackInd = stack.pop()
                res[stackInd] = i - stackInd
            stack.append((t, i))
        return res","Utilizing a stack to track indices of temperatures and calculate the number of days until warmer temperatures. Initialize an array res to store the result with zeros. Create an empty stack to store pairs [temperature, index]. Iterate through the temperatures, keeping track of both the temperature and its index. While the stack is not empty and the current temperature is greater than the temperature at the top of the stack, pop elements from the stack, calculate the number of days until warmer temperatures for the popped indices, and update res accordingly. Push the current temperature and its index onto the stack. Finally, return res containing the number of days until warmer temperatures for each temperature in the input array."
"You are given a sorted array consisting of only integers where every 
element appears exactly twice, except for one element which appears 
exactly once.

Return the single element that appears only once.

Your solution must run in O(log n) time and O(1) space.

 
Example 1:
Input: nums = [1,1,2,3,3,4,4,8,8]
Output: 2","class Solution:
    def singleNonDuplicate(self, nums: List[int]) -> int:
        left, right = 0, len(nums) - 1
        while left < right:
            mid = (left + right) // 2
            if mid % 2 == 1:
                mid -= 1
            if nums[mid] != nums[mid + 1]:
                right = mid
            else:
                left = mid + 2
        return nums[left]","This code uses binary search to find the single element that appears only once in a sorted array. It compares elements at midpoints and their adjacent elements. By adjusting the search range based on these comparisons, it identifies the unique element efficiently. This approach ensures O(log n) time complexity and O(1) space complexity."
"Given the head of a singly linked list, return the middle node of the linked list.

If there are two middle nodes, return the second middle node.

 
Example 1:
Input: head = [1,2,3,4,5,6]
Output: [4,5,6]
Explanation: Since the list has two middle nodes with values 3 and 4, we return the second one.","class Solution:
    def middleNode(self, head: Optional[ListNode]) -> Optional[ListNode]:
        slow = head
        fast = head
        while(fast and fast.next):
            slow = slow.next
            fast = fast.next.next
        
        return slow","This code finds the middle node of a singly linked list using a two-pointer approach. It initializes two pointers, slow and fast, both starting at the head of the linked list. While the fast pointer and its next node are not None, it advances the slow pointer by one node and the fast pointer by two nodes. This effectively makes the slow pointer reach the middle node when the fast pointer reaches the end. Finally, it returns the slow pointer, which points to the middle (or second middle) node of the linked list."